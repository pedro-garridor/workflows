# Snakefile para llamado de CNVs con GATK

contols = glob_wildcards("REF/{control}.bam").control
samples = glob_wildcards("Originales/{sample}.bam").sample

'''
# BAM preprocessing

rule duplicated:
    input:
        "Originales/{sample}.bam"
    output:
        bam=temp("BAMdedup/{sample}_dedup.bam")
    shell:
        "java -jar picard.jar MarkDuplicates I={input} O={output.bam} M=BAMdedup/{wildcards.sample}.txt; "
        "rm BAMdedup/{wildcards.sample}.txt"

rule groups:
    input:
        "BAMdedup/{sample}_dedup.bam"
    output:
        temp("BAMgroup/{sample}.bam")
    shell:
        "java -jar picard.jar AddOrReplaceReadGroups I={input} O={output} "
        "RGLB=lib1 RGLP=ILLUMINA RGPU=unit1 RGSM={wildcards.sample}"

rule recalibrator:
    input:
        bam="BAMgroup/{sample}.bam",
        ref="genome.fa",
        dbsnp="00-All.vcf.gz"
    output:
        temp("BAMgroup/{sample}_recal.table")
    shell:
        "gatk BaseRecalibrator -I {input.bam} -R {input.ref} --known-sites {input.dbsnp} -O {output}"

rule recalibrate:
    input:
        bam="BAMgroup/{sample}.bam",
        ref="genome.fa",
        table="BAMgroup/{sample}_recal.fa"
    output:
        protected("BAM/{sample}.bam")
    shell:
        "gatk ApplyBQSR -R {input.ref} -I {input.bam} --bqsr-recal-file {input.table} -O {output}"
        
'''

rule read_counts:
    input:
        bam="REF/{control}.bam",
        intervals="intervals.interval_list",
    output:
        "PON/{control}.hdf5"
    shell:
        "gatk CollectReadCounts -I {input.bam} -l {input.intervals} --interval-merging-rule OVERLAPPING_ONLY -O {output}"

rule pon:
    input:
        expand("PON/{control}.hdf5", control = controls)
    output:
        "PON/PON.hdf5"
    shell:
        # TODO
